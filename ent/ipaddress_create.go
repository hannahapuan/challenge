// Code generated by entc, DO NOT EDIT.

package ent

import (
	"challenge/ent/ipaddress"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// IPAddressCreate is the builder for creating a IPAddress entity.
type IPAddressCreate struct {
	config
	mutation *IPAddressMutation
	hooks    []Hook
}

// SetUUID sets the "uuid" field.
func (iac *IPAddressCreate) SetUUID(u uuid.UUID) *IPAddressCreate {
	iac.mutation.SetUUID(u)
	return iac
}

// SetCreatedAt sets the "created_at" field.
func (iac *IPAddressCreate) SetCreatedAt(t time.Time) *IPAddressCreate {
	iac.mutation.SetCreatedAt(t)
	return iac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableCreatedAt(t *time.Time) *IPAddressCreate {
	if t != nil {
		iac.SetCreatedAt(*t)
	}
	return iac
}

// SetUpdatedAt sets the "updated_at" field.
func (iac *IPAddressCreate) SetUpdatedAt(t time.Time) *IPAddressCreate {
	iac.mutation.SetUpdatedAt(t)
	return iac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iac *IPAddressCreate) SetNillableUpdatedAt(t *time.Time) *IPAddressCreate {
	if t != nil {
		iac.SetUpdatedAt(*t)
	}
	return iac
}

// SetResponseCode sets the "response_code" field.
func (iac *IPAddressCreate) SetResponseCode(s string) *IPAddressCreate {
	iac.mutation.SetResponseCode(s)
	return iac
}

// SetIPAddress sets the "ip_address" field.
func (iac *IPAddressCreate) SetIPAddress(s string) *IPAddressCreate {
	iac.mutation.SetIPAddress(s)
	return iac
}

// Mutation returns the IPAddressMutation object of the builder.
func (iac *IPAddressCreate) Mutation() *IPAddressMutation {
	return iac.mutation
}

// Save creates the IPAddress in the database.
func (iac *IPAddressCreate) Save(ctx context.Context) (*IPAddress, error) {
	var (
		err  error
		node *IPAddress
	)
	iac.defaults()
	if len(iac.hooks) == 0 {
		if err = iac.check(); err != nil {
			return nil, err
		}
		node, err = iac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iac.check(); err != nil {
				return nil, err
			}
			iac.mutation = mutation
			if node, err = iac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(iac.hooks) - 1; i >= 0; i-- {
			if iac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (iac *IPAddressCreate) SaveX(ctx context.Context) *IPAddress {
	v, err := iac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iac *IPAddressCreate) Exec(ctx context.Context) error {
	_, err := iac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iac *IPAddressCreate) ExecX(ctx context.Context) {
	if err := iac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iac *IPAddressCreate) defaults() {
	if _, ok := iac.mutation.CreatedAt(); !ok {
		v := ipaddress.DefaultCreatedAt()
		iac.mutation.SetCreatedAt(v)
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		v := ipaddress.DefaultUpdatedAt()
		iac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iac *IPAddressCreate) check() error {
	if _, ok := iac.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "IPAddress.uuid"`)}
	}
	if _, ok := iac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "IPAddress.created_at"`)}
	}
	if _, ok := iac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "IPAddress.updated_at"`)}
	}
	if _, ok := iac.mutation.ResponseCode(); !ok {
		return &ValidationError{Name: "response_code", err: errors.New(`ent: missing required field "IPAddress.response_code"`)}
	}
	if _, ok := iac.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "IPAddress.ip_address"`)}
	}
	return nil
}

func (iac *IPAddressCreate) sqlSave(ctx context.Context) (*IPAddress, error) {
	_node, _spec := iac.createSpec()
	if err := sqlgraph.CreateNode(ctx, iac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (iac *IPAddressCreate) createSpec() (*IPAddress, *sqlgraph.CreateSpec) {
	var (
		_node = &IPAddress{config: iac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ipaddress.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipaddress.FieldID,
			},
		}
	)
	if value, ok := iac.mutation.UUID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: ipaddress.FieldUUID,
		})
		_node.UUID = value
	}
	if value, ok := iac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ipaddress.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := iac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ipaddress.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := iac.mutation.ResponseCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldResponseCode,
		})
		_node.ResponseCode = value
	}
	if value, ok := iac.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldIPAddress,
		})
		_node.IPAddress = value
	}
	return _node, _spec
}

// IPAddressCreateBulk is the builder for creating many IPAddress entities in bulk.
type IPAddressCreateBulk struct {
	config
	builders []*IPAddressCreate
}

// Save creates the IPAddress entities in the database.
func (iacb *IPAddressCreateBulk) Save(ctx context.Context) ([]*IPAddress, error) {
	specs := make([]*sqlgraph.CreateSpec, len(iacb.builders))
	nodes := make([]*IPAddress, len(iacb.builders))
	mutators := make([]Mutator, len(iacb.builders))
	for i := range iacb.builders {
		func(i int, root context.Context) {
			builder := iacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IPAddressMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) SaveX(ctx context.Context) []*IPAddress {
	v, err := iacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iacb *IPAddressCreateBulk) Exec(ctx context.Context) error {
	_, err := iacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iacb *IPAddressCreateBulk) ExecX(ctx context.Context) {
	if err := iacb.Exec(ctx); err != nil {
		panic(err)
	}
}
