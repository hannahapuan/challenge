// Code generated by entc, DO NOT EDIT.

package ent

import (
	"challenge/ent/ipaddress"
	"challenge/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IPAddressUpdate is the builder for updating IPAddress entities.
type IPAddressUpdate struct {
	config
	hooks    []Hook
	mutation *IPAddressMutation
}

// Where appends a list predicates to the IPAddressUpdate builder.
func (iau *IPAddressUpdate) Where(ps ...predicate.IPAddress) *IPAddressUpdate {
	iau.mutation.Where(ps...)
	return iau
}

// SetUpdatedAt sets the "updated_at" field.
func (iau *IPAddressUpdate) SetUpdatedAt(t time.Time) *IPAddressUpdate {
	iau.mutation.SetUpdatedAt(t)
	return iau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iau *IPAddressUpdate) SetNillableUpdatedAt(t *time.Time) *IPAddressUpdate {
	if t != nil {
		iau.SetUpdatedAt(*t)
	}
	return iau
}

// SetResponseCode sets the "response_code" field.
func (iau *IPAddressUpdate) SetResponseCode(s string) *IPAddressUpdate {
	iau.mutation.SetResponseCode(s)
	return iau
}

// Mutation returns the IPAddressMutation object of the builder.
func (iau *IPAddressUpdate) Mutation() *IPAddressMutation {
	return iau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iau *IPAddressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iau.hooks) == 0 {
		affected, err = iau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iau.mutation = mutation
			affected, err = iau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iau.hooks) - 1; i >= 0; i-- {
			if iau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iau *IPAddressUpdate) SaveX(ctx context.Context) int {
	affected, err := iau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iau *IPAddressUpdate) Exec(ctx context.Context) error {
	_, err := iau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iau *IPAddressUpdate) ExecX(ctx context.Context) {
	if err := iau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iau *IPAddressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ipaddress.Table,
			Columns: ipaddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipaddress.FieldID,
			},
		},
	}
	if ps := iau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iau.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ipaddress.FieldUpdatedAt,
		})
	}
	if value, ok := iau.mutation.ResponseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldResponseCode,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// IPAddressUpdateOne is the builder for updating a single IPAddress entity.
type IPAddressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAddressMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iauo *IPAddressUpdateOne) SetUpdatedAt(t time.Time) *IPAddressUpdateOne {
	iauo.mutation.SetUpdatedAt(t)
	return iauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iauo *IPAddressUpdateOne) SetNillableUpdatedAt(t *time.Time) *IPAddressUpdateOne {
	if t != nil {
		iauo.SetUpdatedAt(*t)
	}
	return iauo
}

// SetResponseCode sets the "response_code" field.
func (iauo *IPAddressUpdateOne) SetResponseCode(s string) *IPAddressUpdateOne {
	iauo.mutation.SetResponseCode(s)
	return iauo
}

// Mutation returns the IPAddressMutation object of the builder.
func (iauo *IPAddressUpdateOne) Mutation() *IPAddressMutation {
	return iauo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iauo *IPAddressUpdateOne) Select(field string, fields ...string) *IPAddressUpdateOne {
	iauo.fields = append([]string{field}, fields...)
	return iauo
}

// Save executes the query and returns the updated IPAddress entity.
func (iauo *IPAddressUpdateOne) Save(ctx context.Context) (*IPAddress, error) {
	var (
		err  error
		node *IPAddress
	)
	if len(iauo.hooks) == 0 {
		node, err = iauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IPAddressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iauo.mutation = mutation
			node, err = iauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iauo.hooks) - 1; i >= 0; i-- {
			if iauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) SaveX(ctx context.Context) *IPAddress {
	node, err := iauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iauo *IPAddressUpdateOne) Exec(ctx context.Context) error {
	_, err := iauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iauo *IPAddressUpdateOne) ExecX(ctx context.Context) {
	if err := iauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iauo *IPAddressUpdateOne) sqlSave(ctx context.Context) (_node *IPAddress, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ipaddress.Table,
			Columns: ipaddress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ipaddress.FieldID,
			},
		},
	}
	id, ok := iauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPAddress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaddress.FieldID)
		for _, f := range fields {
			if !ipaddress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipaddress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iauo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ipaddress.FieldUpdatedAt,
		})
	}
	if value, ok := iauo.mutation.ResponseCode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ipaddress.FieldResponseCode,
		})
	}
	_node = &IPAddress{config: iauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
